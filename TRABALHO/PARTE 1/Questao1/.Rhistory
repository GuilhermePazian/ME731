##calcula coeficiente de correlacao(%)
cv <- function(x){
100 * sd(x)/mean(x)
}
#lendo as funçoes que o caio disponibilizou para MANOVA (mudei uma coisa lá)
source("codigoscaioMANOVA.r")
inames <- c("Espécie","Comprimento da Asa","Largura da Asa","Comprimento 3° palpo","Largura 3° palpo", "Comprimento 4° palpo", "Comprimento 12° segmento da antena", "Compimento 13° segmento da antena")
dadosmoscas <- read.table(file = "dadosmoscas.txt",col.names = c("Esp","Comp_Asa","Larg_Asa","Comp_3_palpo","Larg_3_palpo", "Comp_4_palpo", "Comp_12_seg_ant", "Comp_13_seg_ant"))
dadosmoscas$Esp=as.factor(dadosmoscas$Esp )#definindo o tipo da especie como fator
m.dados <- dadosmoscas[,-1]
v.especies <- cbind(as.numeric(dadosmoscas[,1])+1)
v.especies <- cbind(as.numeric(dadosmoscas[,1])+1)
m.dados <- dadosmoscas[,-1]
v.n_especies <- rbind(35,35)
k.G <- 2
k.P <- 7
test.igual.matriz <-Box.teste.Igual.MCov(as.matrix(m.dados),v.especies,v.n_especies,k.G)
m.sigma.P <- test.igual.matriz$Sigma.P
m.sigma.P
v.especies
v.especies <- cbind(as.numeric(dadosmoscas[,1]))
m.dados <- dadosmoscas[,-1]
v.n_especies <- rbind(35,35)
k.G <- 2
k.P <- 7
v.especies
test.igual.matriz <-Box.teste.Igual.MCov(as.matrix(m.dados),v.especies,v.n_especies,k.G)
m.sigma.P <- test.igual.matriz$Sigma.P
m.sigma.P
## Função que  carrega e instala pacotes
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
pkg <- "tidyverse"
ipak(pkg)
##calcula coeficiente de correlacao(%)
cv <- function(x){
100 * sd(x)/mean(x)
}
#lendo as funçoes que o caio disponibilizou para MANOVA (mudei uma coisa lá)
source("codigoscaioMANOVA.r")
#nomes para usar nas tabelas
inames <- c("Espécie","Comprimento da Asa","Largura da Asa","Comprimento 3° palpo","Largura 3° palpo", "Comprimento 4° palpo", "Comprimento 12° segmento da antena", "Compimento 13° segmento da antena")
#Identificação das colunas do Banco de dados
dadosmoscas <- read.table(file = "dadosmoscas.txt",col.names = c("Esp","Comp_Asa","Larg_Asa","Comp_3_palpo","Larg_3_palpo", "Comp_4_palpo", "Comp_12_seg_ant", "Comp_13_seg_ant"))
dadosmoscas$Esp=as.factor(dadosmoscas$Esp )#definindo o tipo da especie como fator
#glimpse(dadosmoscas) #Verificando os tipos de variaveis.
#Pegando a coluna das espécies (grupos) para fazer o vetor identificador de grupos
v.especies <- cbind(as.numeric(dadosmoscas[,1]))
#tirando a primeira coluna para fazer a matriz de dados
m.dados <- dadosmoscas[,-1]
#Criando um vetor com as quantidades de observações de cada grupo, constam 35 de cada grupo
v.n_especies <- rbind(35,35)
#Identificação da quantidade de grupos
k.G <- 2
#Identificação da quantidade de variáveis
k.P <- 7
#Teste de igualdade das matrizes de covariância entre os grupos
#resuldado da função
test.igual.matriz <-Box.teste.Igual.MCov(as.matrix(m.dados),v.especies,v.n_especies,k.G)
#matriz sigma P (não lembro o que é exatamente)
m.sigma.P <- test.igual.matriz$Sigma.P
#estatística do teste
est.test.igual.m.cov <- test.igual.matriz$est.test
#p-valor do teste
p.valor.igual.m.cov <- test.igual.matriz$p.valor
#Teste e resuldados MANOVA
fit.manova <- manova(as.matrix(m.dados) ~ v.especies)
#Aqui é apresentado testes anova para cada variável
anovas <-summary.aov(fit.manova)
#Aqui é o resuldado das estatísticas de teste que ele passou para MANOVA
#OBS acho que vai ter que copiar os p-valores "na mão" pq não está fácil extrai-los
Wilks <- summary.manova(fit.manova,test="Wilks")
Pillai <- summary.manova(fit.manova,test="Pillai")
Hotelling <- summary.manova(fit.manova,test="Hotelling-Lawley")
Roy <- summary.manova(fit.manova,test="Roy")
# Parâmetros preditos pelo modelo
m.B <- matrix(coef(fit.manova),2,7) #2 Grupos e 7 variáveis
v.beta <- matrix(t(m.B))
m.X <- model.matrix(fit.manova)
m.Sigmabeta <- kronecker(solve(t(m.X)%*%m.X),m.sigma.P)
#Médias preditas pelo modelo com os respectivos Erro padrão e IC's
#Lembre que algumas matrizes usadas aqui foram definidas no código anterior à isto (logo acima)
#k.posicao_Var é o índice "k" do \mu_k que você quer prever
MedidasPreditasModelo <- function(k.posicao_var){
m.x_mu <- matrix(data = rep(0,28), nrow = 2, ncol = 14)
m.x_mu[,k.posicao_var] <- 1
m.x_mu[2,k.posicao_var+7] <- 1
m.mu_pred <- m.x_mu%*%v.beta
m.ep_mu_pred <- sqrt(diag(m.mu_pred%*%m.Sigmabeta%*%t(m.mu_pred)))
m.IC_mu_pred <- cbind(m.mu_pred-1.96*m.ep_mu_pred,m.mu_pred+1.96*m.ep_mu_pred)
return(list(mu = m.mu_pred,ep = m.ep_mu_pred, IC = m.IC_mu_pred))
}
a <- MedidasPreditasModelo(k.posicao_var = 1)
m.Sigmabeta
m.mu_pred
k.posicao_var <-1
m.x_mu <- matrix(data = rep(0,28), nrow = 2, ncol = 14)
m.x_mu[,k.posicao_var] <- 1
m.x_mu[2,k.posicao_var+7] <- 1
m.mu_pred <- m.x_mu%*%v.beta
m.ep_mu_pred <- sqrt(diag(m.mu_pred%*%m.Sigmabeta%*%t(m.mu_pred)))
m.mu_pred
m.Sigmabeta
m.mu_pred
m.ep_mu_pred <- sqrt(diag(m.x_mu%*%m.Sigmabeta%*%t(m.x_mu)))
m.IC_mu_pred <- cbind(m.mu_pred-1.96*m.ep_mu_pred,m.mu_pred+1.96*m.ep_mu_pred)
a <- MedidasPreditasModelo(k.posicao_var = 1)
MedidasPreditasModelo <- function(k.posicao_var){
m.x_mu <- matrix(data = rep(0,28), nrow = 2, ncol = 14)
m.x_mu[,k.posicao_var] <- 1
m.x_mu[2,k.posicao_var+7] <- 1
m.mu_pred <- m.x_mu%*%v.beta
m.ep_mu_pred <- sqrt(diag(m.x_mu%*%m.Sigmabeta%*%t(m.x_mu)))
m.IC_mu_pred <- cbind(m.mu_pred-1.96*m.ep_mu_pred,m.mu_pred+1.96*m.ep_mu_pred)
return(list(mu = m.mu_pred,ep = m.ep_mu_pred, IC = m.IC_mu_pred))
}
a <- MedidasPreditasModelo(k.posicao_var = 1)
a <- MedidasPreditasModelo(k.posicao_var = 1)
plotCI(a$mu,ui=a$IC[,2],li=a$IC[,1],axes=FALSE,xlab="espécie",ylab="média",pch=19,cex=1.2,cex.lab=1.2,cex.axis=1.2,main="Comprimento da Asa")
pkg <- c("tidyverse","plyr","plotrix") #plotix acho que é pra fazer o plot
ipak(pkg)
a <- MedidasPreditasModelo(k.posicao_var = 1)
plotrix::plotCI(a$mu,ui=a$IC[,2],li=a$IC[,1],axes=FALSE,xlab="espécie",ylab="média",pch=19,cex=1.2,cex.lab=1.2,cex.axis=1.2,main="Comprimento da Asa")
axis(2,seq(4,7,0.2),cex.axis=1.2)
axis(1,1:2,c("Leptoconops carteri","Leptoconops torrens"),cex.axis=1.2)
w<-1;q<-2
w
q
r <- function(a=c(TRUE,FALSE)) print(a)
r(a)
# Resíduos univariados
Seteplots_Residuos <- function(typeresid,wplot){
# 1 Variável
var<-1; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 2 Variável
var<-2; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 3 Variável
var<-3; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 4 Variável
var<-4; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 5 Variável
var<-5; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 6 Variável
var<-6; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 7 Variável
var<-7; gen.graf.resid(mY,mresult,var,typeresid,wplot)
}
mY <- m.dados
mresult<- fit.manova
typeresid <- "univariate"
wplot <- "diagnostics"
Seteplots_Residuos()
var<-1; gen.graf.resid(mY,mresult,var,typeresid,wplot)
var<-1; gen.graf.resid(mY,mresult,var,typeresid,wplot)
mresult<- fit.manova
mY <- m.dados
mresult<- fit.manova
typeresid <- "univariate"
wplot <- "diagnostics"
mresiduo <- mresult$residuals
mbeta <- coef(mresult)
mX <- as.matrix(model.matrix(mresult))
n <- nrow(mX)
p <- ncol(mbeta)
q <- nrow(mbeta)
mSigma<-t(mY-mX%*%mbeta)%*%(mY-mX%*%mbeta)/(n-q)
mY
mX
as.matrix(model.matrix(mresult))
mbeta
mY
mSigma<-t(mY-mX%*%mbeta)%*%(mY-mX%*%mbeta)/(n-q)
typeof(mY)
typeof(mX)
mY <- as.matrix(m.dados)
mresult<- fit.manova
typeresid <- "univariate"
wplot <- "diagnostics"
mresiduo <- mresult$residuals
mbeta <- coef(mresult)
mX <- as.matrix(model.matrix(mresult))
n <- nrow(mX)
p <- ncol(mbeta)
q <- nrow(mbeta)
mSigma<-t(mY-mX%*%mbeta)%*%(mY-mX%*%mbeta)/(n-q)
vmu<- apply(mresiduo,2,mean)
vresid <- n*mahalanobis(mresiduo,center=vmu,cov=mSigma)
nvar <- length(vmu)
n <- length(vresid)
mX <- model.matrix(mresult)
vresidA <- matrix(0,n,1)
for (i in 1:n)
{
mXi <- rbind(mX[i,])
mYi <- rbind(mY[i,])
Ai <- 1 - mXi%*%solve(t(mX)%*%mX)%*%t(mXi)
vresidA[i] <- (Ai^(-2))*mYi%*%solve(mSigma)%*%t(mYi)
}
par(mfrow =c(1,1))
qqPlot(vresidA,dist="chisq",df=nvar,col.lines=1,grid="FALSE",xlab="quantil da distribuição qui-quadrado",ylab="quantil da forma quadrática",cex=1.2,id.cex=1.2)
install.packages("qqnorm")
pkg <- c("tidyverse","plyr","plotrix","car") #plotrix para "plotic"
ipak(pkg)
par(mfrow =c(1,1))
car::qqPlot(vresidA,dist="chisq",df=nvar,col.lines=1,grid="FALSE",xlab="quantil da distribuição qui-quadrado",ylab="quantil da forma quadrática",cex=1.2,id.cex=1.2)
#Esta função é só pra não ficar copiando, da pra colocar fora do código e chamar com o source.
Seteplots_Residuos <- function(mY,mresult,var,typeresid,wplot){
# 1 Variável
var<-1; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 2 Variável
var<-2; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 3 Variável
var<-3; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 4 Variável
var<-4; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 5 Variável
var<-5; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 6 Variável
var<-6; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 7 Variável
var<-7; gen.graf.resid(mY,mresult,var,typeresid,wplot)
}
mY <- as.matrix(m.dados)
mresult<- fit.manova
typeresid <- "univariate"
wplot <- "diagnostics"
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
wplot <- "envelope"
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
typeresid <- "multivariate"
wplot <- "diagnostics"
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
gen.graf.resid.quad.form(mY,mresult)
typeresid <- "multivariate"
wplot <- "diagnostics"
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
typeresid <- "univariate"
wplot <- "diagnostics"
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
typeresid <- "multivariate"
wplot <- "diagnostics"
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
wplot <- "envelope"
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
GeraMatriz_C_B_U(k.ncomp,k.i,k.j,k.k,k.s){
GeraMatriz_C_B_U(k.ncomp,k.i,k.j,k.k,k.s){
GeraMatriz_C_B_U <- function(k.ncomp,k.i,k.j,k.k,k.s) {
#k.ncomp <- 3  #número de parâmetros \alphas a serem comparados à 0.
#k.i <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.j <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.k <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.s <- 0  #mude aqui quando definir as comparações, isto define a posição
m.C1 <- cbind(0,1) # para testar os \alpha's
#Comparação de k.ncomp \alpha's com zero e são 7 variáveis
m.U1 <- matrix(data = c(rep(0,k.ncomp*7)), nrow = 7, ncol = n.comp)
m.U1[k.i,1] <- 1
if(k.ncomp >= 2) m.U1[k.j,2] <- 1
if(k.ncomp >= 3) m.U1[k.k,3] <- 1
if(k.ncomp >= 4) m.U1[k.s,4] <- 1
m.M <- rbind(rep(0,k.ncomp))
}
G
p
k.G
teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
GeraMatriz_C_B_U <- function(k.ncomp,k.i,k.j,k.k,k.s) {
#k.ncomp <- 3  #número de parâmetros \alphas a serem comparados à 0.
#k.i <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.j <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.k <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.s <- 0  #mude aqui quando definir as comparações, isto define a posição
m.C1 <- cbind(0,1) # para testar os \alpha's
#Comparação de k.ncomp \alpha's com zero e são 7 variáveis
m.U1 <- matrix(data = c(rep(0,k.ncomp*7)), nrow = 7, ncol = k.ncomp)
m.U1[k.i,1] <- 1
if(k.ncomp >= 2) m.U1[k.j,2] <- 1
if(k.ncomp >= 3) m.U1[k.k,3] <- 1
if(k.ncomp >= 4) m.U1[k.s,4] <- 1
m.M <- rbind(rep(0,k.ncomp))
return(list(C = m.C1, U = m.U1, M = m.M))
}
teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
TesteF.CBU.M(fit.manova,m.Sigma.P,k.p,k.G,m.C1,m.U,m.M)
k.P
TesteF.CBU.M(fit.manova,m.Sigma.P,k.P,k.G,m.C1,m.U,m.M)
teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
TesteF.CBU.M(fit.manova,m.Sigma.P,k.P,k.G,teste1$C.teste1$U,teste1$M)
TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,teste1$C.teste1$U,teste1$M)
m.sigma.P
k.P
k.G
teste1$C
TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,teste1$C,teste1$U,teste1$M)
source("codigoscaioMANOVA.r")
teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,teste1$C,teste1$U,teste1$M)
source("codigoscaioMANOVA.r")
teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,teste1$C,teste1$U,teste1$M)
resultados_teste1 <- TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,m.teste1$C,m.teste1$U,m.teste1$M)
m.teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
resultados_teste1 <- TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,m.teste1$C,m.teste1$U,m.teste1$M)
source("codigoscaioMANOVA.r")
m.teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
resultados_teste1 <- TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,m.teste1$C,m.teste1$U,m.teste1$M)
resultados_teste1$estatqui
## Função que  carrega e instala pacotes
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
pkg <- c("tidyverse","plyr","plotrix","car") #plotrix para "plotic" car para "qqplot"
ipak(pkg)
## Função que  carrega e instala pacotes
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
pkg <- c("tidyverse","plyr","plotrix","car") #plotrix para "plotic" car para "qqplot"
ipak(pkg)
##calcula coeficiente de correlacao(%)
cv <- function(x){
100 * sd(x)/mean(x)
}
#lendo as funçoes que o caio disponibilizou para MANOVA (mudei uma coisa lá)
source("codigoscaioMANOVA.r")
#nomes para usar nas tabelas
inames <- c("Espécie","Comprimento da Asa","Largura da Asa","Comprimento 3° palpo","Largura 3° palpo", "Comprimento 4° palpo", "Comprimento 12° segmento da antena", "Compimento 13° segmento da antena")
#Identificação das colunas do Banco de dados
dadosmoscas <- read.table(file = "dadosmoscas.txt",col.names = c("Esp","Comp_Asa","Larg_Asa","Comp_3_palpo","Larg_3_palpo", "Comp_4_palpo", "Comp_12_seg_ant", "Comp_13_seg_ant"))
dadosmoscas$Esp=as.factor(dadosmoscas$Esp )#definindo o tipo da especie como fator
#glimpse(dadosmoscas) #Verificando os tipos de variaveis.
#Pegando a coluna das espécies (grupos) para fazer o vetor identificador de grupos
v.especies <- cbind(as.numeric(dadosmoscas[,1]))
#tirando a primeira coluna para fazer a matriz de dados
m.dados <- dadosmoscas[,-1]
#Criando um vetor com as quantidades de observações de cada grupo, constam 35 de cada grupo
v.n_especies <- rbind(35,35)
#Identificação da quantidade de grupos
k.G <- 2
#Identificação da quantidade de variáveis
k.P <- 7
#Teste de igualdade das matrizes de covariância entre os grupos
#resuldado da função
test.igual.matriz <-Box.teste.Igual.MCov(as.matrix(m.dados),v.especies,v.n_especies,k.G)
#matriz sigma P (não lembro o que é exatamente)
m.sigma.P <- test.igual.matriz$Sigma.P
#estatística do teste
est.test.igual.m.cov <- test.igual.matriz$est.test
#p-valor do teste
p.valor.igual.m.cov <- test.igual.matriz$p.valor
#Teste e resuldados MANOVA
fit.manova <- manova(as.matrix(m.dados) ~ v.especies)
#Aqui é apresentado testes anova para cada variável
anovas <-summary.aov(fit.manova)
#Aqui é o resuldado das estatísticas de teste que ele passou para MANOVA
#OBS acho que vai ter que copiar os p-valores "na mão" pq não está fácil extrai-los
Wilks <- summary.manova(fit.manova,test="Wilks")
Pillai <- summary.manova(fit.manova,test="Pillai")
Hotelling <- summary.manova(fit.manova,test="Hotelling-Lawley")
Roy <- summary.manova(fit.manova,test="Roy")
# Parâmetros preditos pelo modelo
m.B <- matrix(coef(fit.manova),2,7) #2 Grupos e 7 variáveis
v.beta <- matrix(t(m.B))
m.X <- model.matrix(fit.manova)
m.Sigmabeta <- kronecker(solve(t(m.X)%*%m.X),m.sigma.P)
#Médias preditas pelo modelo com os respectivos Erro padrão e IC's
#Lembre que algumas matrizes usadas aqui foram definidas no código anterior à isto (logo acima)
#k.posicao_Var é o índice "k" do \mu_k que você quer prever
MedidasPreditasModelo <- function(k.posicao_var){
m.x_mu <- matrix(data = rep(0,28), nrow = 2, ncol = 14)
m.x_mu[,k.posicao_var] <- 1
m.x_mu[2,k.posicao_var+7] <- 1
m.mu_pred <- m.x_mu%*%v.beta
m.ep_mu_pred <- sqrt(diag(m.x_mu%*%m.Sigmabeta%*%t(m.x_mu)))
m.IC_mu_pred <- cbind(m.mu_pred-1.96*m.ep_mu_pred,m.mu_pred+1.96*m.ep_mu_pred)
return(list(mu = m.mu_pred,ep = m.ep_mu_pred, IC = m.IC_mu_pred))
}
#Não coloquei o gráfico na função "MedidasPreditasModelo" pois a função plotCI não é do ggplot, ai não da pra atribuir à uma variável (acho). Então tem que chamar a função e logo embaixo a do gráfico no local que irão ser plotados os gráficos. vai ter que repetir o código abaixo para as 7 variáveis.
#lembrar de mudar o título dos gráficos.
a <- MedidasPreditasModelo(k.posicao_var = 1)
plotrix::plotCI(a$mu,ui=a$IC[,2],li=a$IC[,1],axes=FALSE,xlab="espécie",ylab="média",pch=19,cex=1.2,cex.lab=1.2,cex.axis=1.2,main="Comprimento da Asa")
axis(2,seq(4,7,0.2),cex.axis=1.2)
axis(1,1:2,c("Leptoconops carteri","Leptoconops torrens"),cex.axis=1.2)
#Aqui os testes CBU=M vou fazer de uma maneira geral pois depende da análise descritiva . AQUI COMPARA-SE OS ALPHAS COM ZERO
#Para testar \alpha_{2i} =  \alpha_{2j} = \alpha_{2k} = \alpha_{2s} = 0
#OBS caso for comparaçoes de menor ordem é só ignorar os parâmetros restantes
GeraMatriz_C_B_U <- function(k.ncomp,k.i,k.j,k.k,k.s) {
#k.ncomp <- 3  #número de parâmetros \alphas a serem comparados à 0.
#k.i <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.j <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.k <- 0  #mude aqui quando definir as comparações, isto define a posição
#k.s <- 0  #mude aqui quando definir as comparações, isto define a posição
m.C1 <- cbind(0,1) # para testar os \alpha's
#Comparação de k.ncomp \alpha's com zero e são 7 variáveis
m.U1 <- matrix(data = c(rep(0,k.ncomp*7)), nrow = 7, ncol = k.ncomp)
m.U1[k.i,1] <- 1
if(k.ncomp >= 2) m.U1[k.j,2] <- 1
if(k.ncomp >= 3) m.U1[k.k,3] <- 1
if(k.ncomp >= 4) m.U1[k.s,4] <- 1
m.M <- rbind(rep(0,k.ncomp))
return(list(C = m.C1, U = m.U1, M = m.M))
}
#Um exemplo abaixo de como utilizar a função, aqui está comparando simultaneamente se as espécies de moscas são iguais (na média) comparando-se em relação as duas primeiras variáveis
m.teste1 <- GeraMatriz_C_B_U(k.ncomp = 2,1,2)
resultados_teste1 <- TesteF.CBU.M(fit.manova,m.sigma.P,k.P,k.G,m.teste1$C,m.teste1$U,m.teste1$M)
resultados_teste1$estatqui
# Resíduos univariados
#Esta função é só pra não ficar copiando, da pra colocar fora do código e chamar com o source.
Seteplots_Residuos <- function(mY,mresult,var,typeresid,wplot){
# 1 Variável
var<-1; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 2 Variável
var<-2; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 3 Variável
var<-3; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 4 Variável
var<-4; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 5 Variável
var<-5; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 6 Variável
var<-6; gen.graf.resid(mY,mresult,var,typeresid,wplot)
# 7 Variável
var<-7; gen.graf.resid(mY,mresult,var,typeresid,wplot)
}
#Os gráficos são bem parecidos com os multivariados. Mas aqui usa "Resíduo studentizado (multivariado) (RSM)"
mY <- as.matrix(m.dados)
mresult<- fit.manova
typeresid <- "univariate"
wplot <- "diagnostics"
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
# Zoom nos envelopes
wplot <- "envelope"
par(mfrow =c(4,2))
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
# Resíduos multivariados
#Os gráficos são bem parecidos com os univariados. Mas aqui usa "Resíduo studentizado (multivariado) (RSM)"
typeresid <- "multivariate"
wplot <- "diagnostics"
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
# Zoom nos envelopes
wplot <- "envelope"
Seteplots_Residuos(mY,mresult,var,typeresid,wplot)
# Resíduo baseado na distância Mahalanobis
gen.graf.resid.quad.form(mY,mresult)
#definindo opções padrões
options(OutDec= ",")
knitr::opts_chunk$set(fig.width=6, fig.height=3.5, fig.path='Figs/', fig.align='center', echo=FALSE, warning=FALSE, message=FALSE)
#install.packages(c("ggplot2","knitr","dplyr", "xtable", "gridExtra"))
#pacotes utilizados
packages <- c("ggplot2",
"knitr",
"dplyr",
"tidyverse",
"xtable",
"gridExtra")
ipak(packages)
#lendo as funçoes que o caio disponibilizou para MANOVA (mudei uma coisa lá)
source("codigoscaioMANOVA.r")
source("funcoes_murilo.r")
#install.packages(c("ggplot2","knitr","dplyr", "xtable", "gridExtra"))
#pacotes utilizados
packages <- c("ggplot2",
"knitr",
"dplyr",
"tidyverse",
"xtable",
"gridExtra",
"plyr",
"plotrix",
"car")
ipak(packages)
#lendo as funçoes que o caio disponibilizou para MANOVA (mudei uma coisa lá)
source("codigoscaioMANOVA.r")
source("funcoes_murilo.r")
#nomes para usar nas tabelas
inames <- c("Espécie","Comprimento da Asa","Largura da Asa","Comprimento 3° palpo","Largura 3° palpo", "Comprimento 4° palpo", "Comprimento 12° segmento da antena", "Compimento 13° segmento da antena")
##leitura do banco de dados e Identificação das colunas do Banco de dados
dadosmoscas <- read.table(file = "dadosmoscas.txt",col.names = c("Esp","Comp_Asa","Larg_Asa","Comp_3_palpo","Larg_3_palpo", "Comp_4_palpo", "Comp_12_seg_ant", "Comp_13_seg_ant"))
dadosmoscas$Esp %<>%  as.factor()#definindo o tipo da especie como fator
install.packages("magrittr")
install.packages("magrittr")
#nomes para usar nas tabelas
inames <- c("Espécie","Comprimento da Asa","Largura da Asa","Comprimento 3° palpo","Largura 3° palpo", "Comprimento 4° palpo", "Comprimento 12° segmento da antena", "Compimento 13° segmento da antena")
##leitura do banco de dados e Identificação das colunas do Banco de dados
dadosmoscas <- read.table(file = "dadosmoscas.txt",col.names = c("Esp","Comp_Asa","Larg_Asa","Comp_3_palpo","Larg_3_palpo", "Comp_4_palpo", "Comp_12_seg_ant", "Comp_13_seg_ant"))
dadosmoscas$Esp %<>%  as.factor()#definindo o tipo da especie como fator
library(magrittr)
#nomes para usar nas tabelas
inames <- c("Espécie","Comprimento da Asa","Largura da Asa","Comprimento 3° palpo","Largura 3° palpo", "Comprimento 4° palpo", "Comprimento 12° segmento da antena", "Compimento 13° segmento da antena")
##leitura do banco de dados e Identificação das colunas do Banco de dados
dadosmoscas <- read.table(file = "dadosmoscas.txt",col.names = c("Esp","Comp_Asa","Larg_Asa","Comp_3_palpo","Larg_3_palpo", "Comp_4_palpo", "Comp_12_seg_ant", "Comp_13_seg_ant"))
dadosmoscas$Esp %<>%  as.factor()#definindo o tipo da especie como fator
#glimpse(dadosmoscas) #Verificando os tipos de variaveis.
View(dadosmoscas)
View(dadosmoscas)
